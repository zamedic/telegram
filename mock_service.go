// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_telegram is a generated GoMock package.
package telegram

import (
	gomock "github.com/golang/mock/gomock"
	telegram_bot_api_v4 "gopkg.in/telegram-bot-api.v4"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// SendMessage mocks base method
func (m *MockService) SendMessage(chatID int64, message string, messageID int) error {
	ret := m.ctrl.Call(m, "SendMessage", chatID, message, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockServiceMockRecorder) SendMessage(chatID, message, messageID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockService)(nil).SendMessage), chatID, message, messageID)
}

// SendImageToGroup mocks base method
func (m *MockService) SendImageToGroup(image []byte, group int64) error {
	ret := m.ctrl.Call(m, "SendImageToGroup", image, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendImageToGroup indicates an expected call of SendImageToGroup
func (mr *MockServiceMockRecorder) SendImageToGroup(image, group interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendImageToGroup", reflect.TypeOf((*MockService)(nil).SendImageToGroup), image, group)
}

// SendKeyboard mocks base method
func (m *MockService) SendKeyboard(buttons []string, text string, chat int64) {
	m.ctrl.Call(m, "SendKeyboard", buttons, text, chat)
}

// SendKeyboard indicates an expected call of SendKeyboard
func (mr *MockServiceMockRecorder) SendKeyboard(buttons, text, chat interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendKeyboard", reflect.TypeOf((*MockService)(nil).SendKeyboard), buttons, text, chat)
}

// RegisterCommand mocks base method
func (m *MockService) RegisterCommand(command Command) {
	m.ctrl.Call(m, "RegisterCommand", command)
}

// RegisterCommand indicates an expected call of RegisterCommand
func (mr *MockServiceMockRecorder) RegisterCommand(command interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCommand", reflect.TypeOf((*MockService)(nil).RegisterCommand), command)
}

// RegisterCommandLet mocks base method
func (m *MockService) RegisterCommandLet(commandlet Commandlet) {
	m.ctrl.Call(m, "RegisterCommandLet", commandlet)
}

// RegisterCommandLet indicates an expected call of RegisterCommandLet
func (mr *MockServiceMockRecorder) RegisterCommandLet(commandlet interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCommandLet", reflect.TypeOf((*MockService)(nil).RegisterCommandLet), commandlet)
}

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// CommandIdentifier mocks base method
func (m *MockCommand) CommandIdentifier() string {
	ret := m.ctrl.Call(m, "CommandIdentifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// CommandIdentifier indicates an expected call of CommandIdentifier
func (mr *MockCommandMockRecorder) CommandIdentifier() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandIdentifier", reflect.TypeOf((*MockCommand)(nil).CommandIdentifier))
}

// CommandDescription mocks base method
func (m *MockCommand) CommandDescription() string {
	ret := m.ctrl.Call(m, "CommandDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// CommandDescription indicates an expected call of CommandDescription
func (mr *MockCommandMockRecorder) CommandDescription() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandDescription", reflect.TypeOf((*MockCommand)(nil).CommandDescription))
}

// Execute mocks base method
func (m *MockCommand) Execute(update telegram_bot_api_v4.Update) {
	m.ctrl.Call(m, "Execute", update)
}

// Execute indicates an expected call of Execute
func (mr *MockCommandMockRecorder) Execute(update interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommand)(nil).Execute), update)
}

// MockCommandlet is a mock of Commandlet interface
type MockCommandlet struct {
	ctrl     *gomock.Controller
	recorder *MockCommandletMockRecorder
}

// MockCommandletMockRecorder is the mock recorder for MockCommandlet
type MockCommandletMockRecorder struct {
	mock *MockCommandlet
}

// NewMockCommandlet creates a new mock instance
func NewMockCommandlet(ctrl *gomock.Controller) *MockCommandlet {
	mock := &MockCommandlet{ctrl: ctrl}
	mock.recorder = &MockCommandletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandlet) EXPECT() *MockCommandletMockRecorder {
	return m.recorder
}

// CanExecute mocks base method
func (m *MockCommandlet) CanExecute(update telegram_bot_api_v4.Update, state State) bool {
	ret := m.ctrl.Call(m, "CanExecute", update, state)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanExecute indicates an expected call of CanExecute
func (mr *MockCommandletMockRecorder) CanExecute(update, state interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanExecute", reflect.TypeOf((*MockCommandlet)(nil).CanExecute), update, state)
}

// Execute mocks base method
func (m *MockCommandlet) Execute(update telegram_bot_api_v4.Update, state State) {
	m.ctrl.Call(m, "Execute", update, state)
}

// Execute indicates an expected call of Execute
func (mr *MockCommandletMockRecorder) Execute(update, state interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommandlet)(nil).Execute), update, state)
}

// NextState mocks base method
func (m *MockCommandlet) NextState(update telegram_bot_api_v4.Update, state State) string {
	ret := m.ctrl.Call(m, "NextState", update, state)
	ret0, _ := ret[0].(string)
	return ret0
}

// NextState indicates an expected call of NextState
func (mr *MockCommandletMockRecorder) NextState(update, state interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextState", reflect.TypeOf((*MockCommandlet)(nil).NextState), update, state)
}

// Fields mocks base method
func (m *MockCommandlet) Fields(update telegram_bot_api_v4.Update, state State) []string {
	ret := m.ctrl.Call(m, "Fields", update, state)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Fields indicates an expected call of Fields
func (mr *MockCommandletMockRecorder) Fields(update, state interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fields", reflect.TypeOf((*MockCommandlet)(nil).Fields), update, state)
}
